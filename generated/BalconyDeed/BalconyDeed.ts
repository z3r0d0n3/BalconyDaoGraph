// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewDeed extends ethereum.Event {
  get params(): NewDeed__Params {
    return new NewDeed__Params(this);
  }
}

export class NewDeed__Params {
  _event: NewDeed;

  constructor(event: NewDeed) {
    this._event = event;
  }

  get Referer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get DeedOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get DeedLevel(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get DeedPoints(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateDeed extends ethereum.Event {
  get params(): UpdateDeed__Params {
    return new UpdateDeed__Params(this);
  }
}

export class UpdateDeed__Params {
  _event: UpdateDeed;

  constructor(event: UpdateDeed) {
    this._event = event;
  }

  get DeedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get DeedLevel(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get DeedPoints(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BalconyDeed__addressToDeedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class BalconyDeed__getAllDeedsResultValue0Struct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get level(): BigInt {
    return this[1].toBigInt();
  }

  get points(): BigInt {
    return this[2].toBigInt();
  }

  get referrals(): Array<Address> {
    return this[3].toAddressArray();
  }
}

export class BalconyDeed__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BalconyDeed extends ethereum.SmartContract {
  static bind(address: Address): BalconyDeed {
    return new BalconyDeed("BalconyDeed", address);
  }

  addressToDeed(param0: Address): BalconyDeed__addressToDeedResult {
    let result = super.call(
      "addressToDeed",
      "addressToDeed(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new BalconyDeed__addressToDeedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addressToDeed(
    param0: Address
  ): ethereum.CallResult<BalconyDeed__addressToDeedResult> {
    let result = super.tryCall(
      "addressToDeed",
      "addressToDeed(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BalconyDeed__addressToDeedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  deedIndex(): BigInt {
    let result = super.call("deedIndex", "deedIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deedIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deedIndex", "deedIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllDeeds(): Array<BalconyDeed__getAllDeedsResultValue0Struct> {
    let result = super.call(
      "getAllDeeds",
      "getAllDeeds():((uint256,uint256,uint256,address[])[])",
      []
    );

    return result[0].toTupleArray<BalconyDeed__getAllDeedsResultValue0Struct>();
  }

  try_getAllDeeds(): ethereum.CallResult<
    Array<BalconyDeed__getAllDeedsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllDeeds",
      "getAllDeeds():((uint256,uint256,uint256,address[])[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BalconyDeed__getAllDeedsResultValue0Struct>()
    );
  }

  getAllParticipants(): Array<Address> {
    let result = super.call(
      "getAllParticipants",
      "getAllParticipants():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllParticipants(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllParticipants",
      "getAllParticipants():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTotalSupply(): BigInt {
    let result = super.call("maxTotalSupply", "maxTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTotalSupply",
      "maxTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintFee(): BigInt {
    let result = super.call("mintFee", "mintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintFee", "mintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participants(param0: BigInt): Address {
    let result = super.call("participants", "participants(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_participants(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "participants",
      "participants(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): BalconyDeed__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new BalconyDeed__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<BalconyDeed__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BalconyDeed__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _oldDeed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _utils(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AirdropDeedCall extends ethereum.Call {
  get inputs(): AirdropDeedCall__Inputs {
    return new AirdropDeedCall__Inputs(this);
  }

  get outputs(): AirdropDeedCall__Outputs {
    return new AirdropDeedCall__Outputs(this);
  }
}

export class AirdropDeedCall__Inputs {
  _call: AirdropDeedCall;

  constructor(call: AirdropDeedCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AirdropDeedCall__Outputs {
  _call: AirdropDeedCall;

  constructor(call: AirdropDeedCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _deedId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangeMaxSupplyCall extends ethereum.Call {
  get inputs(): ChangeMaxSupplyCall__Inputs {
    return new ChangeMaxSupplyCall__Inputs(this);
  }

  get outputs(): ChangeMaxSupplyCall__Outputs {
    return new ChangeMaxSupplyCall__Outputs(this);
  }
}

export class ChangeMaxSupplyCall__Inputs {
  _call: ChangeMaxSupplyCall;

  constructor(call: ChangeMaxSupplyCall) {
    this._call = call;
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMaxSupplyCall__Outputs {
  _call: ChangeMaxSupplyCall;

  constructor(call: ChangeMaxSupplyCall) {
    this._call = call;
  }
}

export class ClaimNewDeedByBurningDeedCall extends ethereum.Call {
  get inputs(): ClaimNewDeedByBurningDeedCall__Inputs {
    return new ClaimNewDeedByBurningDeedCall__Inputs(this);
  }

  get outputs(): ClaimNewDeedByBurningDeedCall__Outputs {
    return new ClaimNewDeedByBurningDeedCall__Outputs(this);
  }
}

export class ClaimNewDeedByBurningDeedCall__Inputs {
  _call: ClaimNewDeedByBurningDeedCall;

  constructor(call: ClaimNewDeedByBurningDeedCall) {
    this._call = call;
  }

  get _deedId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimNewDeedByBurningDeedCall__Outputs {
  _call: ClaimNewDeedByBurningDeedCall;

  constructor(call: ClaimNewDeedByBurningDeedCall) {
    this._call = call;
  }
}

export class MintDeedCall extends ethereum.Call {
  get inputs(): MintDeedCall__Inputs {
    return new MintDeedCall__Inputs(this);
  }

  get outputs(): MintDeedCall__Outputs {
    return new MintDeedCall__Outputs(this);
  }
}

export class MintDeedCall__Inputs {
  _call: MintDeedCall;

  constructor(call: MintDeedCall) {
    this._call = call;
  }

  get referer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get referral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintDeedCall__Outputs {
  _call: MintDeedCall;

  constructor(call: MintDeedCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseUriCall extends ethereum.Call {
  get inputs(): SetBaseUriCall__Inputs {
    return new SetBaseUriCall__Inputs(this);
  }

  get outputs(): SetBaseUriCall__Outputs {
    return new SetBaseUriCall__Outputs(this);
  }
}

export class SetBaseUriCall__Inputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }

  get _baseUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseUriCall__Outputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class SetMintFeeCall extends ethereum.Call {
  get inputs(): SetMintFeeCall__Inputs {
    return new SetMintFeeCall__Inputs(this);
  }

  get outputs(): SetMintFeeCall__Outputs {
    return new SetMintFeeCall__Outputs(this);
  }
}

export class SetMintFeeCall__Inputs {
  _call: SetMintFeeCall;

  constructor(call: SetMintFeeCall) {
    this._call = call;
  }

  get _mintFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintFeeCall__Outputs {
  _call: SetMintFeeCall;

  constructor(call: SetMintFeeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
